public class FindOdd {
    public static int findIt(int[] a) {
        int result = 0;
        
        for (int num : a) {
            result ^= num;
        }
        
        return result;
    }
}

class Kata {
    public static String numberToString(int num) {
        return String.valueOf(num);
    }
}

public class Kata {

    public static String solution(String str) {
        StringBuilder reversed = new StringBuilder();
        
        for (int i = str.length() - 1; i >= 0; i--) {
            reversed.append(str.charAt(i));
        }
        
        return reversed.toString();
    }

}

public class Fraction implements Comparable<Fraction> {
    private final long top;
    private final long bottom;

    public Fraction(long numerator, long denominator) {
        if (denominator == 0) {
            throw new IllegalArgumentException("Denominator cannot be zero.");
        }

        long gcd = gcd(numerator, denominator);
        long normalizedTop = numerator / gcd;
        long normalizedBottom = denominator / gcd;

        if (normalizedBottom < 0) {
            normalizedTop = -normalizedTop;
            normalizedBottom = -normalizedBottom;
        }

        this.top = normalizedTop;
        this.bottom = normalizedBottom;
    }

    @Override
    public int hashCode() { 
        return 17 * Long.hashCode(top) + Long.hashCode(bottom); 
    }    

    @Override
    public boolean equals(Object o) { 
        return o instanceof Fraction && compareTo((Fraction)o) == 0; 
    }    

    @Override
    public int compareTo(Fraction f2) { 
        return Long.compare(top * f2.bottom, f2.top * bottom); 
    }

    public Fraction add(Fraction f2) {
        long newTop = this.top * f2.bottom + f2.top * this.bottom;
        long newBottom = this.bottom * f2.bottom;
        return new Fraction(newTop, newBottom); 
    }

    @Override
    public String toString() {
        return top + "/" + bottom;
    }

    private long gcd(long a, long b) {
        while (b != 0) {
            long temp = b;
            b = a % b;
            a = temp;
        }
        return Math.abs(a); 
    }
}

public class Hex {

    private final int value;

    public Hex(int value) {
        this.value = value;
    }

    public int valueOf() {
        return value;
    }

    @Override
    public String toString() {
        return "0x" + Integer.toHexString(value).toUpperCase();
    }

    public String toJSON() {
        return toString();
    }

    public Hex plus(Hex other) {
        return new Hex(this.value + other.valueOf());
    }

    public Hex minus(Hex other) {
        return new Hex(this.value - other.valueOf());
    }

    public Hex plus(int number) {
        return new Hex(this.value + number);
    }

    public Hex minus(int number) {
        return new Hex(this.value - number);
    }

    public static int parse(String string) {
        string = string.trim();
        if (string.startsWith("0x")) {
            return Integer.parseInt(string.substring(2), 16);
        } else {
            return Integer.parseInt(string, 16);
        }
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        Hex hex = (Hex) other;
        return value == hex.value;
    }

    @Override
    public int hashCode() {
        return Integer.hashCode(value);
    }
}

